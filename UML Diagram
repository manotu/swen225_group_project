class Cluedo
{
  *->1 Board board;
  *->1 Triple envelope;
  *->3..6 Player players;
  
  public void restart() { }
  
  public boolean gameOver() { }
  
  public void dealCardsToPlayers(List<Card> cards) { }
  
  public List<Card> initialiseCards() { }
  
  public void setMurderCircumstances(List<Card> cards) { }
  
  public void initialisePlayers() { }
  
  public List<CharacterToken> distributeTokensToPlayers(List<CharacterToken> characterTokens) { }
  
  public List<CharacterToken> initialisePlayerTokens() { }
  
  public List<WeaponToken> initialiseWeaponTokens() { }
  
  public void runGame() { }
  
  public static boolean queryRestart() { }
  
  public static void main(String[] args) { }

  
}

class Card
{
  Description description;
  
  public boolean equals(Object o) { }
  public int hashCode() { }
  public String toString() { }
}

class Board
{
    const int ROWS = 25;
    const int COLS = 24;
  
    *->600 Tile board;
  
  public void setup(List<WeaponToken> weapons, List<CharacterToken> characters) { }
  
  public void loadFile() { }
 
  public void placeWeaponTokens(List<WeaponToken> weaponTokens) { }
  
  public void placePlayerTokens(List<CharacterToken> characterTokens) { } 
  
  public void display() { }
  
  public Tile getTile(int row, int col) { }
  
  public void reallocateTokens(Triple t) { }
  
  public Token findToken(Description d) { }
  
  public Room findRoom(Description d) { }
}

class Tile
{
  *->12 Token tokens;
  
  public Token tokenAt(int row, int col){ }
  
  public boolean addToken(Token token) { }
  
  public List<Token> getTokens() { }
  
  public boolean hasToken(Token t) { }
  
  public boolean removeToken(Token token) { }
  
   public abstract String symbol();
  
  public void print(int row, int col) { }
  
}

class Triple
{
  Card weapon;
Card room;
Card character;
public boolean equals(Object o) { }
  
  public boolean containsCard(Card c) { }
  
  public Card getWeapon() { }
  
  public Card getRoom() { }
  
  public Card getCharacter() { }
  
  public void print() { }
}

class Player
{
  *->1 CharacterToken characterToken;
  *->3..6 Card hand;
  private State state;
  *->1 Board board;
    enum State {
        PLAYING, LOST, WON
    }

    enum TurnType{
        END_TURN, SUGGESTION, ACCUSATION
    }
  
  public void setCharacterToken(CharacterToken c) { }
  
  public void addToHand(Card card) { }
  
  public int rollDice() { }
  
  public void moveToken(int moves) { }
  
  public TurnType startTurn() { }
  
  public void printHand() { }
  
  public TurnType getTurnType() { }
  
  public boolean canSuggest() { }
  
  public boolean canRefute(Triple triple) { }
  
  public Card refute(Triple triple) { }
  
  public Triple makeSuggestion() { }
  
  public Triple makeAccusation() { }
  
  public Triple getTriple() { }
  
  public Card getCard(List<Description> types, Description type) {  }
  
  public CharacterToken getCharacterToken() { }
  
  public State getState() { }
  
  public void setState(State s) { }
  
}

class Token
{
  int row; int col;
  Description description;
  
  public void reallocate(Room r, Board b) { }
  
  public void setRow(int r) { }
  
  public void setCol(int c) { }
  
  public abstract String symbol();
  
}

class CharacterToken
{
  isA Token;
  *->0..12 Tile visitedPositions;
  
  public void clearVisitedPositions() { }
  
  public void addVisitedPosition(int row, int col) { }
  
  public String symbol() { }
  
  public boolean moveUp(Board board) { }
  
  public boolean moveDown(Board board) { }
  
  public boolean moveLeft(Board board) { }
  
  public boolean moveRight(Board board) { }
  
  public boolean isValidMove(int destRow, int destCol, Board board) { }
  
  public boolean cannotMove(Board board) { }
  
  class Position {
  int row; int col;
    
    public boolean equals(Object o) { }
    
    public int hashCode() { }
  
  
  }
  
}

class Description {
  
  enum desc{
  // Weapons
    CANDLESTICK, DAGGER, LEAD_PIPE, REVOLVER, ROPE, SPANNER,

    // Characters
    MISS_SCARLETT, MRS_WHITE, MR_GREEN, MRS_PEACOCK, PROFESSOR_PLUM, COLONEL_MUSTARD,

    // Rooms
    KITCHEN, BALLROOM, CONSERVATORY, DINING_ROOM, BILLIARD_ROOM, LIBRARY, LOUNGE, HALL, STUDY;
  }

    Type type;

    public boolean isAWeapon() { }

    public boolean isACharacter() { }

    public boolean isARoom() { }
  
    enum Type{
    CHARACTER, WEAPON, ROOM
    }

}


class Corridor{
  isA Tile;
  public String symbol() { }
}

class Room{
  isA Tile;
  Description description;
  
  public String symbol() { }
  
  
}

class Wall
{
  isA Tile;
  
  public String symbol() { }
  
}

class WeaponToken{
  isA Token;
  
  public String symbol() { }
}
